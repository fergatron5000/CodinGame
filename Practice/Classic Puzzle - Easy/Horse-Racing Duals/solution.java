import java.util.*;
import java.io.*;
import java.math.*;

/**
 * This is my customization of the code auto generated by CodinGame to solve the challenge
 **/
class Solution {
    
    private static int[] powers;

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        int N = in.nextInt();
        powers = new int[N];
        for (int i = 0; i < N; i++) {
            powers[i] = in.nextInt();
        }
        
        quickSort(0, N - 1);
        
        int powerDiff = 10000001;
        
        for(int i = 0; i < (N - 1); i++) {
            int diff = powers[i + 1] - powers[i];
            if (diff < powerDiff)
                powerDiff = diff;
        }

        // Write an action using System.out.println()
        // To debug: System.err.println("Debug messages...");

        System.out.println(powerDiff);
    }
    
    // The following is a customization of the Quick Sort available at http://www.java2novice.com/java-sorting-algorithms/quick-sort/
    private static void quickSort(int lowerIndex, int higherIndex) {
         
        int i = lowerIndex;
        int j = higherIndex;
        // calculate pivot number, I am taking pivot as middle index number
        int pivot = powers[lowerIndex+(higherIndex-lowerIndex)/2];
        // Divide into two arrays
        while (i <= j) {
            /**
             * In each iteration, we will identify a number from left side which 
             * is greater then the pivot value, and also we will identify a number 
             * from right side which is less then the pivot value. Once the search 
             * is done, then we exchange both numbers.
             */
            while (powers[i] < pivot) {
                i++;
            }
            while (powers[j] > pivot) {
                j--;
            }
            if (i <= j) {
                exchangeNumbers(i, j);
                //move index to next position on both sides
                i++;
                j--;
            }
        }
        // call quickSort() method recursively
        if (lowerIndex < j)
            quickSort(lowerIndex, j);
        if (i < higherIndex)
            quickSort(i, higherIndex);
    }
 
    private static void exchangeNumbers(int i, int j) {
        int temp = powers[i];
        powers[i] = powers[j];
        powers[j] = temp;
    }
}
